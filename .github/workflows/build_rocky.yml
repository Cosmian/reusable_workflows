---
name: Rocky linux

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      archive-name:
        required: true
        type: string
      artifacts:
        required: false
        type: string
      target:
        required: true
        type: string
      debug_or_release:
        required: true
        type: string
      docker_image:
        required: true
        type: string
      features:
        required: false
        type: string

env:
  OPENSSL_DIR: /usr/local/openssl

jobs:
  rockylinux-tests:
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: kms
          PGUSER: kms
          POSTGRES_PASSWORD: kms
          POSTGRES_DB: kms
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mariadb:
        image: mariadb
        env:
          MYSQL_DATABASE: kms
          MYSQL_ROOT_PASSWORD: kms

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    name: ${{ inputs.archive-name }}
    runs-on: ubuntu-24.04
    container:
      image: ${{ inputs.docker_image }}

    steps:
      - name: Display cpuinfo
        run: cat /proc/cpuinfo

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          components: rustfmt, clippy

      - name: Local OpenSSL FIPS Install
        run: |
          bash .github/reusable_scripts/get_openssl_binaries.sh
        env:
          OS_NAME: ubuntu_20_04

      - name: Pre-cleanup
        run: |
          set -x
          rm -rf /tmp/sqlite-data /tmp/tmp.toml

      - name: Build and tests
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}

          POSTGRES_USER: kms
          PGUSER: kms
          POSTGRES_PASSWORD: kms
          POSTGRES_DB: kms
          KMS_POSTGRES_URL: postgres://kms:kms@postgres/kms

          MYSQL_DATABASE: kms
          MYSQL_ROOT_PASSWORD: kms
          KMS_MYSQL_URL: mysql://root:kms@mariadb/kms

          KMS_SQLITE_PATH: data/shared

          REDIS_HOST: redis
          REDIS_URL: redis://redis:6379

          # Google variables
          TEST_GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_ID }}
          TEST_GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_SECRET }}
          TEST_GOOGLE_OAUTH_REFRESH_TOKEN: ${{ secrets.TEST_GOOGLE_OAUTH_REFRESH_TOKEN }}
          GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY }}

          TARGET: ${{ inputs.target }}
          DEBUG_OR_RELEASE: ${{ inputs.debug_or_release }}
          FEATURES: ${{ inputs.features }}
          SKIP_SERVICES_TESTS: --skip hsm
        run: |
          bash .github/scripts/cargo_build.sh

      - name: Remove large files before saving cache
        run: |
          find target/ -type f -size ++100M -delete

      - name: Upload for ${{ inputs.docker_image }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}
          path: |
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian_gui
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian_kms
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian_findex_server
            target/${{ inputs.target }}/generate-rpm/*.rpm
            ${{ inputs.artifacts }}
          retention-days: 1
          if-no-files-found: error

  clean-test:
    needs: rockylinux-tests
    name: Clean env test ${{ inputs.archive-name }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}

      - run: find .
        if: contains(runner.os, 'linux')

      - name: Launch binaries
        if: contains(runner.os, 'Linux') || contains(runner.os, 'macos')
        run: |
          # The current path should be /home/runner/work/kms/kms
          pwd
          env
          find . -type f

          if [ -d usr/local/openssl ]; then
            # Copy openssl build for Legacy mode
            sudo mkdir /usr/local/openssl
            sudo chown -R $USER /usr/local/openssl
            rsync -ru usr/local/openssl/ /usr/local/openssl/
            find /usr/local/openssl
            chmod u+x /usr/local/openssl/lib64/ossl-modules/*
          fi

          # There are 2 subdirectories in the current path
          #   usr/local/openssl/
          #   __w/kms/kms/target/
          KMS_PATH="__w/*/*/target/${{ inputs.target }}/${{ inputs.debug_or_release }}"

          for binary in .$KMS_PATH/cosmian*; do
            if [ -f "$binary" ]; then
              chmod u+x "$binary"
              $binary -V
            fi
          done
