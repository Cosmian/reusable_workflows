---
name: Cargo in Docker

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      feature:
        required: true
        type: string
      target:
        required: true
        type: string
      pre-requisites:
        required: true
        type: string
      artifacts:
        required: true
        type: string
      debug_artifacts:
        required: false
        type: string
      os:
        required: true
        type: string

jobs:
  cargo-job:
    name: ${{ inputs.feature }} for docker ${{ inputs.target }}
    runs-on: ${{ inputs.os }}
    container: iyxd/centos7-rust
    # Redis can be required to run tests
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        id: github-cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            pkg/
            target/
          key: ${{ runner.os }}-${{ inputs.target }}-cargo-docker-${{ hashFiles('**/Cargo.lock') }}-${{ github.head_ref }}-${{ github.ref_name }}
          restore-keys: ${{ runner.os }}-${{ inputs.target }}-cargo-docker-${{ hashFiles('**/Cargo.lock') }}-${{ github.head_ref }}-${{ github.ref_name
            }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          target: ${{ inputs.target }}
          override: true

      - name: specific-pre-requisites
        run: ${{ inputs.pre-requisites }}

      - name: Test release with ffi feature
        if: contains(inputs.feature, 'ffi')
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features ${{ inputs.feature }} --target ${{ inputs.target }}
        env:
          REDIS_HOST: redis

      - run: yum -y install python3 python3-pip

      - name: Test release with all features
        if: inputs.target == 'x86_64-unknown-linux-gnu'
        run: |
          sed -i 's/"extension-module",//g' Cargo.toml
          sed -i 's/"abi3-py37"//g' Cargo.toml
          cargo test --release --all-features --target ${{ inputs.target }} --workspace
        env:
          REDIS_HOST: redis

      - name: Build debug with feature ${{ inputs.feature }}
        if: contains(inputs.feature, 'ffi')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --features ${{ inputs.feature }} --target ${{ inputs.target }}

      - name: Build release with feature ${{ inputs.feature }}
        if: contains(inputs.feature, 'ffi')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features ${{ inputs.feature }} --target ${{ inputs.target }}

      - name: cbindgen header generation
        if: contains(inputs.feature, 'ffi')
        run: |
          mkdir -p target

          pushd crates/cloudproof
          cbindgen . -c cbindgen.toml | uniq >../../target/cloudproof.h
          popd

      - name: Upload cargo binaries
        if: inputs.artifacts != ''
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.target }}
          path: ${{ inputs.artifacts }}
          retention-days: 1
          if-no-files-found: error

      - name: Creating zip for debug symbols
        if: inputs.debug_artifacts != ''
        run: |
          zip -r debug_${{ inputs.target }} ${{ inputs.debug_artifacts }}

      - name: Upload cargo debug binaries
        if: inputs.debug_artifacts != ''
        uses: actions/upload-artifact@v3
        with:
          name: debug_${{ inputs.target }}
          path: debug_${{ inputs.target }}.zip
          retention-days: 1
          if-no-files-found: error
