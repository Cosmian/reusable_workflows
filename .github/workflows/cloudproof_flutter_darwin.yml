---
name: Cloudproof Flutter Library

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      target:
        required: true
        type: string
      extension:
        required: true
        type: string
      copy_regression_files:
        required: false
        default: ''
        type: string
      copy_fresh_build:
        required: false
        default: true
        type: boolean

jobs:
  flutter-job:
    name: cloudproof_flutter on macos-12

    runs-on: macos-12

    steps:
      - uses: actions/checkout@v3
        with:
          repository: Cosmian/cloudproof_flutter
          ref: ${{ inputs.branch }}

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.3.4
          channel: stable

      - uses: actions/download-artifact@v4
      - run: find .

      - uses: actions/setup-python@v3
        with:
          python-version: 3.7

      - run: flutter pub get

      - run: python scripts/get_native_libraries.py

      - name: copy fresh build of crate
        if: inputs.copy_fresh_build
        run: |
          cp ${{ inputs.target }}/${{ inputs.target }}/release/*.${{ inputs.extension }} resources/
          cp ${{ inputs.target }}/universal/release/*.a ios/
          cp x86_64-unknown-linux-gnu/*.h resources/

        # Generate bindings in case of no binary found on package.cosmian.com
      - run: flutter pub run ffigen --config ffigen_cloudproof.yaml

      - name: copy non-regression test vectors
        if: inputs.copy_regression_files != ''
        run: ${{ inputs.copy_regression_files }}

      - name: Display exported functions in iOS universal lib
        run: |
          nm -g ios/libcloudproof.a || true

      - name: List all simulators
        if: contains(runner.os, 'macOS')
        run: xcrun xctrace list devices

      - name: Start Simulator
        if: contains(runner.os, 'macOS')
        # the command "xcrun simctl boot" expects a device identifier
        # the assignment of the UUID variable consists of retrieving the ID of the simulator
        # by extracting it from the command "xcrun xctrace list devices"
        run: |
          UUID=$(xcrun xctrace list devices | grep -m 1 "^iPhone 14 Pro Simulator (16.2)" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UUID
          xcrun simctl boot "${UUID:?No Simulator with this name found}"

      - name: Run integration tests on iOS
        if: contains(runner.os, 'macOS')
        run: |
          cd example
          flutter test integration_test/
          cd ..

      - run: flutter test --concurrency 1 -x redis # exclude redis tests (no docker for macos)
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379
