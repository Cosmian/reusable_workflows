---
name: Cargo

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      feature:
        required: true
        type: string
      target:
        required: true
        type: string
      pre-requisites:
        required: true
        type: string
      artifacts:
        required: true
        type: string
      os:
        required: true
        type: string

jobs:
  cargo-job:
    name: ${{ inputs.feature }} for ${{ inputs.target }}
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            pkg/
            target/
          key: ${{ runner.os }}-${{ inputs.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ inputs.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          target: ${{ inputs.target }}
          override: true

      - name: specific-pre-requisites
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: ${{ inputs.pre-requisites }}

      - name: Test release with ffi feature
        if: contains(inputs.feature, 'ffi')
        uses: actions-rs/cargo@v1
        with:
          command: test
          use-cross: true
          args: --release --features ${{ inputs.feature }} --target ${{ inputs.target }}

      - name: Test release with all features
        if: inputs.target == 'x86_64-unknown-linux-gnu'
        uses: actions-rs/cargo@v1
        with:
          command: test
          use-cross: true
          args: --release --all-features --target ${{ inputs.target }} --workspace

      - name: Build release with feature ${{ inputs.feature }}
        if: contains(inputs.feature, 'ffi')
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --features ${{ inputs.feature }} --target ${{ inputs.target }}

      - name: Wasm-pack build release
        if: inputs.feature == 'wasm_bindgen'
        run: |
          pushd crates/cover_crypt
          wasm-pack build -d ../../target/web/cover_crypt --target web --release --features wasm_bindgen
          wasm-pack test --node --features wasm_bindgen
          popd

          pushd crates/findex
          wasm-pack build -d ../../target/web/findex --target web --release --features wasm_bindgen
          # wasm-pack test --node --features wasm_bindgen
          popd

          pushd crates/fpe
          wasm-pack build -d ../../target/web/fpe --target web --release --features wasm_bindgen
          wasm-pack test --node --features wasm_bindgen
          popd

      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          cache: pip # caching pip dependencies
      - run: |
          pip install -r crates/cover_crypt/python/requirements.txt
          pip install -r crates/findex/python/requirements.txt
          pip install -r crates/fpe/python/requirements.txt

      - name: Python maturin build
        if: inputs.feature != 'wasm_bindgen'
        run: |
          pushd crates/cover_crypt
          maturin build --release --features python --target ${{ inputs.target }} --target-dir target_python
          popd

          pushd crates/findex
          maturin build --release --features python --target ${{ inputs.target }} --target-dir target_python
          popd

          pushd crates/fpe
          maturin build --release --features python --target ${{ inputs.target }} --target-dir target_python
          popd

      - name: Upload cargo binaries
        if: inputs.artifacts != ''
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.target }}
          path: ${{ inputs.artifacts }}
          retention-days: 1
          if-no-files-found: error
